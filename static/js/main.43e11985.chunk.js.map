{"version":3,"sources":["InventoryList.js","App.js","reportWebVitals.js","index.js"],"names":["InventoryList","inventory","setInventory","useState","editingItem","setEditingItem","updatedQuantity","setUpdatedQuantity","errorMessage","setErrorMessage","isLoading","setIsLoading","categoryOrder","isCancelDelayActive","setIsCancelDelayActive","isSaveDelayActive","setIsSaveDelayActive","inputRef","useRef","sortedCategories","Object","keys","sort","a","b","indexOf","handleCancel","event","preventDefault","setTimeout","useEffect","db","getDatabase","inventoryRef","ref","unsubscribe","onValue","snapshot","data","val","console","log","current","focus","React","createElement","Fragment","className","role","map","category","key","entries","_ref","itemId","itemData","style","display","alignItems","width","justifyContent","qty","type","value","onChange","e","target","onClick","newQuantity","String","trim","test","parsedQuantity","parseInt","isNaN","itemRef","update","then","catch","error","handleSave","disabled","opacity","cursor","onTouchStart","undefined","warn","handleEdit","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.43e11985.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { getDatabase, ref, onValue, update } from \"firebase/database\";\r\nimport \"./InventoryList.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction InventoryList() {\r\n  const [inventory, setInventory] = useState({});\r\n  const [editingItem, setEditingItem] = useState(null);\r\n  const [updatedQuantity, setUpdatedQuantity] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const categoryOrder = [\"Display\", \"Workstation\", \"Peripherals\"];\r\n  const [isCancelDelayActive, setIsCancelDelayActive] = useState(false);\r\n  const [isSaveDelayActive, setIsSaveDelayActive] = useState(false)\r\n  const inputRef = useRef(null);\r\n  \r\n  const sortedCategories = Object.keys(inventory).sort((a, b) => {\r\n  const indexA = categoryOrder.indexOf(a);\r\n  const indexB = categoryOrder.indexOf(b);\r\n  return indexA - indexB; \r\n\r\n});\r\n\r\n\r\n  useEffect(() => {\r\n    const db = getDatabase();\r\n    const inventoryRef = ref(db, \"inventory\");\r\n\t\t\r\n\tsetIsLoading(true);\r\n    \r\n\tconst unsubscribe = onValue(inventoryRef, (snapshot) => {\r\n    const data = snapshot.val();\r\n    setInventory(data || {});\r\n\tsetIsLoading(false)\r\n  });\r\n\t\r\n    return () => unsubscribe();\r\n  },[]);\r\n  \r\n  useEffect(() => {\r\n  if (editingItem) {\r\n    console.log(\"Attempting to focus input:\", inputRef.current); // Debug log\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }\r\n}, [editingItem]); // Dependency on editingItem - runs when editingItem changes\r\n\r\n\r\n  function handleEdit(category, itemId) {\r\n    if (isCancelDelayActive || isSaveDelayActive) { // Prevent edit if cancel OR save delay is active\r\n      return;\r\n    }\r\n    setEditingItem({ category, itemId });\r\n    if (\r\n      inventory[category] &&\r\n      inventory[category][itemId] &&\r\n      inventory[category][itemId].qty !== undefined\r\n    ) {\r\n      setUpdatedQuantity(inventory[category][itemId].qty);\r\n    } else {\r\n      setUpdatedQuantity(0);\r\n      console.warn(`Quantity not found for ${category} - ${itemId}`);\r\n    }\r\n    setErrorMessage(null);\r\n    }\r\n  \r\n  \r\n  \r\n  function handleSave(category, itemId) {\r\n\t  if (isSaveDelayActive) { // Prevent save if save delay is already active\r\n      return;\r\n    }\r\n\t\r\n    const newQuantity = String(updatedQuantity).trim(); // Get the trimmed value\r\n\r\n    if (!/^\\d+$/.test(newQuantity)) { // Regex to check for only digits (integers)\r\n        setErrorMessage(\r\n            \"Invalid quantity. Please enter a non-negative integer.\"\r\n        );\r\n        return;\r\n    }\r\n\r\n    const parsedQuantity = parseInt(newQuantity, 10); // Parse to integer after validation\r\n\r\n    if (isNaN(parsedQuantity) || parsedQuantity < 0) { // Redundant check, but good to have\r\n        setErrorMessage(\r\n            \"Invalid quantity. Please enter a non-negative integer.\"\r\n        );\r\n        return;\r\n    }\r\n\r\n    console.log(\"Attempting to save quantity:\", parsedQuantity);\r\n\r\n    const db = getDatabase();\r\n    const itemRef = ref(db, `inventory/${category}/${itemId}`);\r\n\t\r\n\tsetIsSaveDelayActive(true);\r\n\t  \r\n    update(itemRef, { qty: parsedQuantity })\r\n        .then(() => {\r\n            setEditingItem(null);\r\n            setErrorMessage(null);\r\n\t\tsetTimeout(() => {\r\n          setIsSaveDelayActive(false); // Deactivate save delay after a short period after successful save\r\n        }, 200);\r\n\t\t})\r\n        .catch((error) => {\r\n            console.error(\"Error updating quantity:\", error);\r\n            setErrorMessage(\"Error updating quantity. Please try again later.\");\r\n\t\t\t setIsSaveDelayActive(false);\r\n\t\t});\r\n}\r\n\r\n  function handleCancel(event) {\r\n\tevent.preventDefault();\r\n    setEditingItem(null);\r\n    setErrorMessage(null);\r\n\tsetIsCancelDelayActive(true);\r\n    setTimeout(() => {\r\n      setIsCancelDelayActive(false); \r\n    }, 300); \r\n  }\r\n\r\n\tif (isLoading) {\r\n\t\treturn <div>Loading Inventory.....</div>;\r\n\t}\r\n\t\r\n  return (\r\n  <>\r\n    <div>\r\n      <h2>Welcome to easyInventory App</h2>\r\n      {errorMessage && (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n          {errorMessage}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"inventory-list\">\r\n      {sortedCategories.map((category) => (\r\n        <div key={category}>\r\n          <h3>{category}</h3>\r\n          <ul>\r\n            {inventory[category] && Object.entries(inventory[category]).map(([itemId, itemData]) => (\r\n              <li key={itemId} style={{ display: 'flex', alignItems: 'center' }}>\r\n                <div style={{ display: 'flex', alignItems: 'center', width: '100%', justifyContent: 'space-between' }}> \r\n                  <strong>\r\n                    {itemId}: <span className=\"qty\">{itemData.qty}</span>\r\n                  </strong>\r\n\t\t\t\t\t{editingItem?.category === category &&\r\n\t\t\t\t\t  editingItem?.itemId === itemId? (\r\n\t\t\t\t\t  <>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t  type=\"number\"\r\n\t\t\t\t\t\t  value={updatedQuantity}\r\n\t\t\t\t\t\t  onChange={(e) => setUpdatedQuantity(e.target.value)}\r\n\t\t\t\t\t\t  ref={inputRef}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button onClick={() => handleSave(category, itemId)}\r\n                              className=\"save-button\"\r\n                              disabled={isSaveDelayActive} // Disable Save button during delay\r\n                              style={isSaveDelayActive ? { opacity: 0.5, cursor: 'default' } : {}} // Optional: Visual feedback\r\n                            >\r\n\t\t\t\t\t\t\tSave\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button onClick={handleCancel} onTouchStart={handleCancel} className=\"cancel-button\">\r\n\t\t\t\t\t\t  Cancel\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t): (\r\n\t\t\t\t\t  <button onClick={() => handleEdit(category, itemId)}disabled={isCancelDelayActive} // Disable Edit button during delay\r\n\t\t\t\t\t\t  style={isCancelDelayActive ? { opacity: 0.5, cursor: 'default' } : {}} // Optional: Visual feedback\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t>Edit\r\n\t\t\t\t\t  </button>\r\n\t\t\t\t\t)}\r\n\t\t\t\t  </div>\r\n\t\t\t\t</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n\t</>\r\n  );\r\n  \r\n}\r\n\r\nexport default InventoryList;","import React, { useState, useEffect } from 'react'; // Import useState and useEffect\nimport { getDatabase, ref, onValue } from \"firebase/database\";\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/database\";\nimport InventoryList from './InventoryList';\nimport './App.css';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDt7OjeqsoclcoqKHoQjOUTz3uaD1Q7Ti4\",\n  authDomain: \"easyinventory-22e9f.firebaseapp.com\",\n  databaseURL: \"https://easyinventory-22e9f-default-rtdb.firebaseio.com\",\n  projectId: \"easyinventory-22e9f\",\n  storageBucket: \"easyinventory-22e9f.firebasestorage.app\",\n  messagingSenderId: \"116855328042\",\n  appId: \"1:116855328042:web:3c7982a74aa74ba8d16253\",\n  measurementId: \"G-QKM2NXGXS6\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nfunction App() {\n  const [inventory, setInventory] = useState({}); \n\n  useEffect(() => {\n    const db = getDatabase();\n    const inventoryRef = ref(db, 'inventory');\n\n    const unsubscribe = onValue(inventoryRef, (snapshot) => {\n      const data = snapshot.val();\n      setInventory(data || {});\n    });\n\n    return () => unsubscribe();\n  },[]);\n\n  return (\n    <div className=\"App\">\n      <h1> </h1>\n\t  \n      <InventoryList inventory={inventory} /> {  \n\t  }\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}